SQL QUERIES

-- Table: public.pizza_orders

-- DROP TABLE IF EXISTS public.pizza_orders;

CREATE TABLE IF NOT EXISTS public.pizza_orders
(
    pizza_id integer NOT NULL,
    order_id integer,
    pizza_name_id character varying(50) COLLATE pg_catalog."default",
    quantity integer,
    order_date date,
    order_time time without time zone,
    unit_price numeric(10,2),
    total_price numeric(10,2),
    pizza_size character varying(20) COLLATE pg_catalog."default",
    pizza_category character varying(50) COLLATE pg_catalog."default",
    pizza_ingredients text COLLATE pg_catalog."default",
    pizza_name character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT pizza_orders_pkey PRIMARY KEY (pizza_id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.pizza_orders
    OWNER to postgres;

--Avg order value
select * from pizza_orders
select SUM(total_price) / count(DISTINCT order_id) as Avg_order_Value from pizza_orders;

--TOTAL PIZZAS SOLD
select sum(quantity)as total_Pizzas_Sold from pizza_orders

--TOTAL ORDERS
select count(distinct order_id)as total_orders from pizza_orders;

--AVERAGE PIZZAS PER ORDER
select CAST(cast(sum(quantity) as DECIMAL(10,2)) / cast(count(distinct order_id) as DECIMAL(10,2))AS DECIMAL(10,2)) as Average_Pizzas_Per_Order from pizza_orders

--DAILY TREND FOR TOTAL ODERS
SELECT 
    TO_CHAR(order_date, 'FMDay') AS order_day,
    COUNT(distinct order_id) AS total_orders
FROM 
    pizza_orders
GROUP BY 
    TO_CHAR(order_date, 'FMDay'),
    EXTRACT(DOW FROM order_date)
ORDER BY 
    EXTRACT(DOW FROM order_date)DESC;

--HOUR LIMIT

SELECT 
    EXTRACT(HOUR FROM order_time) AS order_hour,
    COUNT(DISTINCT order_id) AS total_orders
FROM 
    pizza_orders
GROUP BY 
    order_hour
ORDER BY 
    total_orders desc;
--total sales per category in percentage
select pizza_category, sum(total_price) as total_sales, sum(total_price)* 100 / (select sum(total_price)from pizza_orders) as Total_sale
from pizza_orders
group by pizza_category


--total sales for 1st month
SELECT 
    pizza_category, 
    SUM(total_price) AS total_sales,
    ROUND(
        SUM(total_price) * 100.0 / 
        (SELECT SUM(total_price) 
         FROM pizza_orders 
         WHERE EXTRACT(MONTH FROM order_date) = 1), 
    2) AS pct
FROM 
    pizza_orders
WHERE 
    EXTRACT(MONTH FROM order_date) = 1
GROUP BY 
    pizza_category;

-- Sales as per pizza size
select 
	pizza_size,
	sum(total_price) as total_sales,
	ROUND(
		sum(total_price)*100.0/
		(select sum(total_price)
		from pizza_orders
		where extract(quarter from order_date)= 1),
	2) as pct
from pizza_orders
where
	extract(quarter from order_date) = 1
group by pizza_size;
